plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services' // google play service plugins

    // dagger hilt
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.sahil_admin.codedoubt"
        minSdk 19
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    } // add in the android in build.gradle (module)
}

// Dagger hilt -> Allow references to generated code
kapt {
    correctErrorTypes true
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // firebase
    // for firebase versioning (no need to specify versions in other dependencies when using BOM)
    implementation platform('com.google.firebase:firebase-bom:30.4.0')
    implementation 'com.google.firebase:firebase-auth-ktx' // auth dependency
    implementation 'com.google.android.gms:play-services-auth:20.3.0' // play services dependency

    implementation 'com.google.firebase:firebase-firestore-ktx' // firestore dependency

    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    // For viewModelScope and lifecycleScope -
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1" // for lifecycle scope
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1" // for viewModel scope

    // Dagger hilt dependency
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
}

/*
DAGGER HILT - DEPENDENCY INJECTION

plugins {
    ..

    // dagger hilt
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

// Dagger hilt dependency
implementation "com.google.dagger:hilt-android:2.44"
kapt "com.google.dagger:hilt-compiler:2.44"

// Dagger hilt -> Allow references to generated code
kapt {
    correctErrorTypes true
}

IN ROOT GRADLE FILE ->
plugins {
    ...

    id 'com.google.dagger.hilt.android' version '2.44' apply false // dagger hilt dependency
}

MAKE APPLICATION CLASS-------------------------
@HiltAndroidApp
class MyApp: Application() {
}

specify the application name in the manifest:
    android:name=".MyApp"

MAKE MODULE------------------------------------
@Module // to declare a module (A module provides dependencies)
@InstallIn(SingletonComponent::class) // defines the scope of dependencies
object AppModule {

    @Provides // so that dagger knows that this function provides dependency
    @Singleton // so that only one instance is created throughout the lifetime of application
    fun provideObject(
        @Named("str1") str: String // if returning class has constructor we need to inject those parameters
    ) : MyObject {
        return MyObject(str)
    }

    @Provides @Singleton @Named("str1")
    fun provideString1() = "Sahil"

    @Provides @Singleton @Named("str2")
    fun provideString2() = "Mahajan"
}

COMPONENTS -> DEFINES THE LIFECYCLE OF INJECTED DEPENDENCIES
// Singleton Component -> As long as application lives
// ViewModel Component -> View Model
// Activity Component -> Lives as long as the activity, destroyed in onStop method
// Activity Retained Component -> Lives across configuration changes created in onCreate till onDestroy
// Fragment Component -> Lives till the fragment lifecycle it is injected in

For providing abstraction ->
@Module
@InstallIn(SingletonComponent::class)
abstract class AbstractAppModule {
    @Binds
    @Singleton
    abstract fun provideObject (myObject: MyObject) : Object // Object is an interface
}
*/